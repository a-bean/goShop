// Code generated by protoc-gen-go-gin. DO NOT EDIT.

package v1

import (
	gin "github.com/gin-gonic/gin"
	http "net/http"
)

type GreeterHttpServer struct {
	server GreeterServer
	router gin.IRouter
}

func RegisterGreeterServerHTTPServer(srv GreeterServer, r gin.IRouter) {
	s := GreeterHttpServer{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

func (s *GreeterHttpServer) SayHello_0(c *gin.Context) {
	var in HelloRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.SayHello(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *GreeterHttpServer) SayHelloAgain_0(c *gin.Context) {
	var in HelloRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.SayHelloAgain(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *GreeterHttpServer) RegisterService() {

	s.router.Handle("POST", "/v1/sayhello", s.SayHello_0)

	s.router.Handle("POST", "/v1/sayhelloagain", s.SayHelloAgain_0)

}
